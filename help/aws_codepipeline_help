CODEPIPELINE()							CODEPIPELINE()



NAME
       codepipeline -

DESCRIPTION
	  Overview

       This  is  the  AWS  CodePipeline API Reference. This guide provides de-
       scriptions of the actions and data types  for  AWS  CodePipeline.  Some
       functionality  for  your pipeline is only configurable through the API.
       For additional information, see the AWS CodePipeline User Guide .

       You can use the AWS CodePipeline API to work  with  pipelines,  stages,
       actions, gates, and transitions, as described below.

       Pipelines  are  models of automated release processes. Each pipeline is
       uniquely named, and consists of actions, gates, and stages.

       You can work with pipelines by calling:

       o create-pipeline , which creates a uniquely-named pipeline.

       o delete-pipeline , which deletes the specified pipeline.

       o get-pipeline , which returns information about a pipeline structure.

       o get-pipeline-state , which  returns  information  about  the  current
	 state of the stages and actions of a pipeline.

       o list-pipelines , which gets a summary of all of the pipelines associ-
	 ated with your account.

       o start-pipeline-execution , which runs the the most recent revision of
	 an artifact through the pipeline.

       o update-pipeline  ,  which updates a pipeline with edits or changes to
	 the structure of the pipeline.

       Pipelines include stages , which are which  are	logical  groupings  of
       gates  and  actions.  Each stage contains one or more actions that must
       complete before the next stage begins. A stage will result  in  success
       or failure. If a stage fails, then the pipeline stops at that stage and
       will remain stopped until either a new version of an  artifact  appears
       in  the	source location, or a user takes action to re-run the most re-
       cent artifact through the pipeline. You can call  get-pipeline-state  ,
       which displays the status of a pipeline, including the status of stages
       in the pipeline, or  get-pipeline , which returns the entire  structure
       of the pipeline, including the stages of that pipeline. For more infor-
       mation about the structure of stages and actions, also refer to the AWS
       CodePipeline Pipeline Structure Reference.

       Pipeline stages include actions , which are categorized into categories
       such as source or build actions performed within a stage of a pipeline.
       For  example,  you  can	use a source action to import artifacts into a
       pipeline from a source such as Amazon S3. Like stages, you do not  work
       with  actions  directly	in  most cases, but you do define and interact
       with actions when  working  with  pipeline  operations  such  as   cre-
       ate-pipeline and  get-pipeline-state .

       Pipelines  also include transitions , which allow the transition of ar-
       tifacts from one stage to the next in a pipeline after the  actions  in
       one stage complete.

       You can work with transitions by calling:

       o disable-stage-transition  , which prevents artifacts from transition-
	 ing to the next stage in a pipeline.

       o enable-stage-transition , which enables transition of	artifacts  be-
	 tween stages in a pipeline.

       Using the API to integrate with AWS CodePipeline

       For  third-party integrators or developers who want to create their own
       integrations with AWS CodePipeline, the expected sequence  varies  from
       the standard API user. In order to integrate with AWS CodePipeline, de-
       velopers will need to work with the following items:

       o Jobs, which are instances of an action. For  example,	a  job	for  a
	 source  action  might import a revision of an artifact from a source.
	 You can work with jobs by calling:  *	 acknowledge-job , which  con-
	 firms whether a job worker has received the specified job,

       o get-job-details , which returns the details of a job,

       o poll-for-jobs	,  which  determines whether there are any jobs to act
	 upon,

       o put-job-failure-result , which provides details of a job failure, and

       o put-job-success-result , which provides details of a job success.

       o Third party jobs, which are instances of an action created by a part-
	 ner  action and integrated into AWS CodePipeline. Partner actions are
	 created by members of the AWS Partner	Network.  You  can  work  with
	 third party jobs by calling:  *   acknowledge-third-party-job , which
	 confirms whether a job worker has received the specified job,

       o get-third-party-job-details , which requests the details of a job for
	 a partner action,

       o poll-for-third-party-jobs  ,  which  determines whether there are any
	 jobs to act upon,

       o put-third-party-job-failure-result , which provides details of a  job
	 failure, and

       o put-third-party-job-success-result  , which provides details of a job
	 success.

AVAILABLE COMMANDS
       o acknowledge-job

       o acknowledge-third-party-job

       o create-custom-action-type

       o create-pipeline

       o delete-custom-action-type

       o delete-pipeline

       o disable-stage-transition

       o enable-stage-transition

       o get-job-details

       o get-pipeline

       o get-pipeline-state

       o get-third-party-job-details

       o help

       o list-action-types

       o list-pipelines

       o poll-for-jobs

       o poll-for-third-party-jobs

       o put-action-revision

       o put-job-failure-result

       o put-job-success-result

       o put-third-party-job-failure-result

       o put-third-party-job-success-result

       o start-pipeline-execution

       o update-pipeline



								CODEPIPELINE()
